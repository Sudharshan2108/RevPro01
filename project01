import pandas as pd
import json

# Load customers.json
with open('customers.json', 'r') as file:
    customers_data = json.load(file)
customers_df = pd.DataFrame(customers_data)

# Load transaction_log.json
with open('transaction_log.json', 'r') as file:
    transactions_data = json.load(file)
transactions_df = pd.DataFrame(transactions_data)

#Establishing Connection
conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="revatureproject01"
    )
    cursor = conn.cursor()

# Create tables if they do not exist
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS Customers (
        customer_id INT PRIMARY KEY,
        customer_name VARCHAR(255),
        country VARCHAR(255),
        city VARCHAR(255)
    )
    """)
    print("Customers table created or already exists.")

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS Products (
        product_id INT PRIMARY KEY,
        product_name VARCHAR(255),
        product_category VARCHAR(255)
    )
    """)
    print("Products table created or already exists.")

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS Transactions (
        order_id INT PRIMARY KEY,
        customer_id INT,
        product_id INT,
        qty INT,
        price DECIMAL(10, 2),
        datetime DATETIME,
        ecommerce_website_name VARCHAR(255),
        payment_type VARCHAR(255),
        payment_txn_id VARCHAR(255),
        payment_txn_success CHAR(1),
        failure_reason VARCHAR(255),
        FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
        FOREIGN KEY (product_id) REFERENCES Products(product_id)
    )
    """)


 # Normalize Customers Table by removing duplicates based on 'customer_id'
    customers_normalized_df = customers_df.drop_duplicates(subset='customer_id')
    
    # Normalize Products Table by removing duplicates based on 'product_id'
    products_normalized_df = transactions_df[['product_id', 'product_name', 'product_category']].drop_duplicates()
   
    # Normalize Transactions Table by ensuring no duplicates based on 'order_id'
    transactions_normalized_df = transactions_df.drop_duplicates(subset='order_id')
# Insert data into the Products table
    for _, row in products_normalized_df.iterrows():
        cursor.execute("""
        INSERT IGNORE INTO Products (product_id, product_name, product_category)
        VALUES (%s, %s, %s)
        """, (row['product_id'], row['product_name'], row['product_category']))
    print("Products data inserted.")

    # Insert data into the Transactions table
    for _, row in transactions_normalized_df.iterrows():
        cursor.execute("""
        INSERT IGNORE INTO Transactions (order_id, customer_id, product_id, qty, price, datetime, 
                                         ecommerce_website_name, payment_type, payment_txn_id, 
                                         payment_txn_success, failure_reason)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (row['order_id'], row['customer_id'], row['product_id'], row['qty'], row['price'], 
              row['datetime'], row['ecommerce_website_name'], row['payment_type'], row['payment_txn_id'], 
              row['payment_txn_success'], row['failure_reason']))
    print("Transactions data inserted.")

    # Commit the transaction
    conn.commit()
    print("Transaction committed successfully.")


# View the contents of the Customers table
    print("\nCustomers Table:")
    cursor.execute("SELECT * FROM Customers LIMIT 10")
    customers_records = cursor.fetchall()
    for record in customers_records:
        print(record)

    # View the contents of the Products table
    print("\nProducts Table:")
    cursor.execute("SELECT * FROM Products LIMIT 10")
    products_records = cursor.fetchall()
    for record in products_records:
        print(record)

    # View the contents of the Transactions table
    print("\nTransactions Table:")
    cursor.execute("SELECT * FROM Transactions LIMIT 10")
    transactions_records = cursor.fetchall()
    for record in transactions_records:
        print(record)
